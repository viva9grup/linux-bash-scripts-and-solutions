=======================================================
=======================================================
This Script is BROKEN YET (use Redis name one)
=======================================================
=======================================================
=======================================================







This file contains how the laravel vps deployment works
=======================================================
- We will install Nginx to proxy on the bases of Domain names
- Nginx will proxy laravel app & phpmyadmin
- We will install Docker to host phpmyadmin & mysql
- We are going to assume that our system is app_1
- Create all files and folder with app_1 name

@@@@@@@@@@
All Ports
@@@@@@@@@@
8000 -> Laravel
8080 -> PhpMyadmin
3306 -> MySQL
=======================================================




=============================================
Setup Domain Records
Disable proxy for each record in cloudflare
=============================================
1. Go to your domain registrar
2. Go to DNS or Records tab
3. Add 1st A Record as @ to your vps_ip
3. Add 1nd CNAME Record as phpmyadmin to your vps_ip or @





Install Nginx, Docker/Compose, CertBot
==============================
$ sudo apt update && sudo apt upgrade -y && sudo apt install curl zip unzip wget nginx -y
$ curl -fsSL https://get.docker.com -o install-docker.sh && sudo sh install-docker.sh
$ sudo apt-get install certbot python3-certbot-nginx -y




Install Composer & Modules for Laravel
==============================
This is the bash script!
==============================
#!/bin/bash
sudo apt install php-cli php-fpm php-zip phpunit php-mysql php-pear php-dev php-xml php-pdo php-curl php-common php-mbstring -y
curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
HASH=`curl -sS https://composer.github.io/installer.sig`
php -r "if (hash_file('SHA384', '/tmp/composer-setup.php') === '$HASH') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer






Install Nodejs
==============================
This is the bash script!
==============================
#!/bin/bash
VER="20.16.0"
sudo apt-get install nodejs curl xz-utils tar wget -y
wget "https://nodejs.org/dist/v${VER}/node-v${VER}-linux-x64.tar.xz"
sudo tar -xf node-v${VER}-linux-x64.tar.xz
sleep 3
cd node-v${VER}-linux-x64
sudo cp -r bin /usr/
sudo cp -r lib /usr/
sudo cp -r include /usr/
sudo cp -r share /usr/
echo "Node JS Downloaded, Installed and Updated to v${VER}"
node -v
cd ..
sudo rm -r node-v${VER}-linux-x64
rm node-v${VER}-linux-x64.tar.xz




=========================================================
Create folder to host our Docker Compose, MySQL, Starter
Do this in root
=========================================================
$ mkdir app_1
$ cd app_1




========================================
Now create Docker compose file
========================================
Create this file in a safe place
Docker compose file code!
It will auto download images
name the file compose.yml (new update)
Run command is at the end
========================================
$ nano compose.yml
services:
  db:
    image: mysql
    restart: always
    environment:
      MYSQL_DATABASE: laravel_db
      MYSQL_USER: laravel_db
      MYSQL_PASSWORD: kinginthenorth1123
      MYSQL_ROOT_PASSWORD: kinginthenorth1123
    ports:
      - 3306:3306
    volumes:
      - ./db_data:/var/lib/mysql
  phpmyadmin:
    image: phpmyadmin
    restart: always
    depends_on:
      - db
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    ports:
      - 8080:80
volumes:
  db_data:

$ docker compose up -d






======================================
Deploy Laravel Code
======================================
1. Create a user like app_1
$ sudo adduser app_1
2. Open SFTP and create a folder name laravel
3. Zip laravel project 
4. Copy your laravel code into the laravel folder
5. SSH into user like ssh app_1@ip-address
$ cd to laravel
6. Unzip your laravel prject files
$ unzip file_name_here.zip
7. Edit .env file & set the mysql creds like mentioned in the compose.yml file
$ nano .env





======================================
Start the laravel project
Create starter script but first
Login back to Root use the first command
We will create 2 .sh files here
======================================
(swicth to root using su)
$ su
$ cd
$ cd app_1
$ nano start.sh
(Paste this code)
****************************************
#!/bin/bash
cd /home/app_1/laravel && php artisan serve --host 0.0.0.0 --port 8000
****************************************
(save and exit then change permissions)
$ chmod +x ./start.sh

(in the same app_1 folder)
$ nano dev.sh
****************************************
#!/bin/bash
cd /home/app_1/laravel && npm run dev
****************************************
$ chmod +x ./dev.sh






======================================
Start the Script as systemd
======================================
$ sudo nano /lib/systemd/system/app_1.service
(Paste this code)

[Unit]
Description=Laravel App_1
After=network.target

[Service]
User=root
WorkingDirectory=/home/app_1/laravel/
ExecStart=/root/app_1/start.sh
Restart=on-failure
RestartSec=10s
[Install]
WantedBy=multi-user.target

(Run these commands to start the systemcmd)
$ sudo systemctl daemon-reload
$ sudo systemctl start app_1
$ sudo systemctl enable app_1
$ sudo systemctl status app_1






======================================
Start the Dev as systemd
======================================
$ sudo nano /lib/systemd/system/app_1_dev.service
(Paste this code)

[Unit]
Description=Laravel App_1 Dev
After=network.target

[Service]
User=root
WorkingDirectory=/home/app_1/laravel/
ExecStart=/root/app_1/dev.sh
Restart=on-failure
RestartSec=10s
[Install]
WantedBy=multi-user.target

(Run these commands to start the systemcmd)
$ sudo systemctl daemon-reload
$ sudo systemctl start app_1_dev
$ sudo systemctl enable app_1_dev







=====================================
Let's configure Nginx & Proxy
Main Domain Nginx (create Domain files)
=====================================
$ nano /etc/nginx/sites-available/howtofixweb.online.conf
server {
    listen 80;
    server_name howtofixweb.online;

    location / {
        proxy_pass http://0.0.0.0:8000; 
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}


PHPMyAdmin Domain Nginx (create Domain files)
=================================
$ nano /etc/nginx/sites-available/phpmyadmin.howtofixweb.online.conf
server {
    listen 80;
    server_name phpmyadmin.howtofixweb.online;
    location / {
        proxy_pass http://0.0.0.0:8080;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

$ sudo ln -s /etc/nginx/sites-available/howtofixweb.online.conf /etc/nginx/sites-enabled/
$ sudo ln -s /etc/nginx/sites-available/phpmyadmin.howtofixweb.online.conf /etc/nginx/sites-enabled/
(Test nginx syntax)
$ sudo nginx -t
$ sudo systemctl restart nginx
$ sudo certbot --nginx -d howtofixweb.online
$ sudo certbot --nginx -d phpmyadmin.howtofixweb.online





===========================================
Change permissions of your app Laravel Folder
Otherwise user will not be able to upload files
Do it as root
===========================================
$ cd /home
$ sudo chown -R www-data:www-data /home/app_1/laravel/storage
$ sudo chown -R www-data:www-data /home/app_1/laravel/bootstrap/cache





===========================================
Configure the firewall (Don't close console)
===========================================
$ sudo apt install ufw -y
$ sudo ufw allow 80
$ sudo ufw allow 443
$ sudo ufw allow 22
$ sudo ufw enable





==============================================
Create swap space, Out of memory protection
5GB SWAP Space. You can change 5 to increase it
==============================================
$ sudo fallocate -l 5G /swapfile
$ sudo chmod 600 /swapfile
$ sudo mkswap /swapfile
$ sudo swapon /swapfile
$ sudo cp /etc/fstab /etc/fstab.bak
$ echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab